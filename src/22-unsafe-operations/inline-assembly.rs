// Rust provides support for inline assembly via the asm! macro.
// It can be used to embed handwritten assembly in the assembly output generated by the compiler.
// Might be necessary where the required performance or timing cannot be otherwise achieved
// Accessing low level hardware primitives, e.g. in kernel code, may also demand this functionality.

// Inline assembly is currently supported on the following architectures:

// - x86 and x86-64
// - ARM
// - AArch64
// - RISC-V

use std::arch::asm;

fn main() {
  // Basic usage
  unsafe {
      // Needs to be inside unsafe block as they could insert arbitrary instructions and break various invariants
      // The instructions to be inserted are listed in the first argument of the asm! macro as a string literal.
      // This will insert a NOP (no operation) instruction into the assembly generated by the compiler.
      asm!("nop");
  }
}

